images - basically docker images are templates used to create docker containers.image stored in registries e.g.docker hub
containers: containers are running instances of docker images
1.docker images (to show the list of images)
2.docker ps (show list of container)
3.docker ps -a (show list of all container)
4.docker pull (command goes to registry & get the image from docker repository)
    eg....docker pull ubuntu(to install ubuntu image)
     for tag use docker pull ubuntu:18.04 (to pull 18.04 ubuntu images)
5.docker run(use an image to run an container)
    eg...docker run ubuntu(just like start services)
          docker run -it ubuntu(switch to ubuntu image)
6.docker images -q (show images id)
7.docker start container id (for start particular container)
8.docker stop container id (for stop particular container or exit for a container to local system)
9.docker stats
10.docker system df (for disk usage of docker)
11.docker system prune(delete container)
12.docker images inspect(details of images)
13.docker rmi image name like ubuntu(to remove the images)                        Note: first we have to stop the container then remove images or either use -f flag to remove forcefully 

Copy files/folders between a container and the local filesystem
docker cp <src-path> <container_id>:<dest-path>     
eg :docker cp sann.txt 44a6165db57b:/tmp/
docker kill (Kill one or more running containers)
docker rename container_id name (Rename a container)
docker export ce3f238fb01d > mongo.tar.gz (Export a container's filesystem as a tar archive)
docker container container_id image_name (Create a new image from a contaigner's changes)

  ---------------Docker Compose-------------
- docker compose tool for defining & running multi-container docker application
- if you have windows & mac user docker-compose is already installed...
- linux command to install docker-compose
Two ways to install docker-compose
1. sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
2.pip install -U docker-compose (this command work only if python is installed on your physical machine)
---------create compose file----------
mkdir composefile
within a directory create .yml extension file.then edit that file.
version: '3'

services:

  web:
    image: nginx
    ports:
    - "8080:80"
  database:
    image: redis
-then check configuration is working fine or not
docker-compose config
-command to start compose file services
sudo docker-compose up -d  (d flag is used for detached mode)
-command to stop
sudo docker-compose down
-scale (within a container how many no of database created)
docker-compose up -d --scale database=4
15.
16.
17.
18.
19.imprative (kubectl create) declarative (kubectl apply) container kavi update nhi hoti wo exit hote delete krni then create new
namespacing,cg group iske wagah se isolation rhte 
service discovery (kubernetes topic to manage network part n all like clusterip)
20.
sudo docker run -t -i ubuntu:14.04 /bin/bash
sudo docker run --name WebServer -p 80:80 -t -i ubuntu:14.04 /bin/bash
apt-get update
apt-get install apache2
service apache2 start

docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

-command to show internal ip of container
sudo docker inspect container_id (to see details of container)
sudo docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_id (to see only internal ip)
sudo docker inspect container_id | grep -i "IPaDDreSS"



cat <<EOF>> minio.credentials
[default]
aws_access_key_id=AKIAIOSVQWW7EZ3D5H6Q
aws_secret_access_key=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
EOF




velero install --provider aws --bucket kubedemo --secret-file ./minio.credentials --backup-location-config region=minio,s3ForcePathStyle=true,s3Url=http://54.68.32.21:9000


velero install --provider velero.io/aws --bucket kubedemo --secret-file ./minio.credentials --backup-location-config region=minio,s3ForcePathStyle=true,s3Url=http://minio.velero.svc:9000,publicUrl=http://172.17.0.2:9000



velero install --provider aws --bucket kubernetes --secret-file ./credentials-velero --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.velero.svc:9000,publicUrl=http://IPADDRESS:9000





https://phoenixnap.com/kb/docker-mongodb
https://www.sohamkamani.com/blog/2016/06/30/docker-mongo-replica-set/
https://linoxide.com/ubuntu-how-to/how-to-install-terraform-on-centos-ubuntu/


docker run -p 30001:27017 --name mongo1 --net my-mongo-cluster mongo mongod --replSet my-mongo-set
docker run -p 30002:27017 --name mongo2 --net my-mongo-cluster mongo mongod --replSet my-mongo-set
docker run -p 30003:27017 --name mongo3 --net my-mongo-cluster mongo mongod --replSet my-mongo-set



docker run --detach --name=mysql -p 52000:3306  --env="MYSQL_ROOT_PASSWORD=mypassword" mysql


1.docker system prune---------
The docker image prune command allows you to clean up unused images. By default, docker image prune only cleans up dangling images. A dangling image is one that is not tagged and is not referenced by any container

2.Dangling Docker Images. Dangling images are created when we overwrite them with a new image of the same name and tag. Let's build this image: docker build -t my-image .

3.The Docker daemon ( dockerd ) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.


docker run itd image_name
docker build -t ace:1.4 -f ace .

create image through running container
1. create image
docker commint container_id composeimage
2.check image will come or not for name composeimage
docker image ls
3.Tag with latest image which you have to create through container id
docker tag  latest_image_id sanjeetjha96/composeimage
4.docker login
5.docker push sanjeetjha96/composeimage

