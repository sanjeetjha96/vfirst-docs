9   1  aws
    2  wh
    3  wget
    4  yum install -y wget
    5  yum install python-pip
    6  wget http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm
    7  ls -lrt
    8  rpm -ivh epel-release-7-11.noarch.rpm
    9  yum repolist
   10  yum install python-pip
   11  rpm -qa | grep -i pip
   12  history 20
   13  a
   14  aws
   15  pip list
   16  pip install awscli botocore
   17  aws
   18  history 20


######## updated steps ###########

    1  curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
    2  yum install unzip
    3  unzip awscli-bundle.zip
    4  ls -lrt
    5  sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
    6  aws
    7  aws configure

https://docs.aws.amazon.com/cli/latest/userguide/install-bundle.html

https://docs.aws.amazon.com/cli/latest/reference/s3/index.html

https://github.com/awslabs



godrej-db-backup




#########################access private subnet instance#####################

root: create directory like private_keys
sudo nano demo.pem (copy the pem file and paste)
ssh ec2-user@10.0.2.142 -i keys.ppk
then give the permission (chmod 400 keys.ppk)
aws s3 ls
############s3 config using CLI##########
sudo aws s3 mb s3://mysanju1(create bucket)
aws s3 mb s3://mysanju1 --region us-west-1(create bucket using region)
aws s3 cp dropdownip.PNG s3://mysanju1 (copy file to bucket)
aws s3api put-object-acl --bucket mysanju1 --key dropdownip.PNG --acl public-read(give access on both object & bucket)
aws s3 presign s3://mysanju1/dropdownip.PNG(generate object URL)
aws s3api put-bucket-versioning --bucket mysanju1 --versioning-configuration Status=Enabled(version_enabled)
aws s3 cp credit s3://mysanju1/mydemo --recursive (push folder)
aws s3 website s3://my-bucket/ --index-document index.html --error-document 404.html
aws s3 rm s3://mysanju1 --recursive(remove bucket dependency)
aws s3api delete-bucket --bucket mysanju1(bucket delete command)
########### create volume ###########
aws ec2 create-volume \    
    --volume-type gp2 \
    --size 50 \
    --availability-zone us-east-1c
########## attach volume ##########
aws ec2 attach-volume --volume-id vol-1234567890abcdef0 --instance-id i-01474ef662b89480 --device /dev/sdf

############ vpc creation using CLI ############
1.Create a VPC with a 172.168.0.0/16 CIDR block
aws ec2 create-vpc --cidr-block 172.168.0.0/16

2.create a subnet with a 172.168.1.0/24 CIDR block.
aws ec2 create-subnet --vpc-id cvpc-0872872f7050d6c34 --cidr-block 172.168.1.0/24

3.Create a second subnet in your VPC with a 172.168.2.0/24 CIDR block.
aws ec2 create-subnet --vpc-id vpc-0872872f7050d6c34 --cidr-block 172.168.2.0/24

4.To make your subnet a public subnet
-------Create an Internet gateway.
aws ec2 create-internet-gateway

5.attach the Internet gateway to your VPC.
aws ec2 attach-internet-gateway --vpc-id vpc-0872872f7050d6c34 --internet-gateway-id igw-01cae96547271f5a8

6.Create a custom route table for your VPC.
aws ec2 create-route-table --vpc-id vpc-0872872f7050d6c34

7.Create a route in the route table that points all traffic (0.0.0.0/0) to the Internet gateway.
aws ec2 create-route --route-table-id rtb-0a0e355c5c677586e --destination-cidr-block 0.0.0.0/0 --gateway-id igw-01cae96547271f5a8

8.To confirm that your route has been created and is active or not.
aws ec2 describe-route-tables --route-table-id rtb-0a0e355c5c677586e

9.The route table is currently not associated with any subnet. You need to associate it with a subnet in your VPC so that traffic from that subnet is routed to the Internet gateway.
aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-0872872f7050d6c34" --query 'Subnets[*].{ID:SubnetId,CIDR:CidrBlock}'

10.You can choose which subnet to associate with the custom route table, for example, subnet-0856c1419c9da0f58.  This subnet will be your public subnet.
aws ec2 associate-route-table  --subnet-id subnet-0856c1419c9da0f58 --route-table-id rtb-0a0e355c5c677586e

11.You can optionally modify the public IP addressing behavior of your subnet so that an instance launched into the subnet automatically receives a public IP address. Otherwise.
aws ec2 modify-subnet-attribute --subnet-id subnet-0856c1419c9da0f58 --map-public-ip-on-launch

-----To launch and connect to an instance in your public subnet
12.Create a key pair of .pem extension
aws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > MyKeyPair.pem

13.Give permission of .pem file
chmod 400 MyKeyPair.pem

14.Create a security group in your VPC, and add a rule that allows SSH access from anywhere.
aws ec2 create-security-group --group-name SSHAccess --description "Security group for SSH access" --vpc-id vpc-0872872f7050d6c34
aws ec2 authorize-security-group-ingress --group-id sg-00bd7ad74e8f767ab --protocol tcp --port 22 --cidr 0.0.0.0/0

15.Launch an instance into your public subnet
aws ec2 run-instances --image-id ami-0323c3dd2da7fb37d --count 1 --instance-type t2.micro --key-name MyKeyPair --security-group-ids sg-00bd7ad74e8f767ab --subnet-id subnet-0856c1419c9da0f58

16.access your public instance for the following command
ssh ec2-user@54.198.86.76 -i MyKeyPair.pem

subnet-0856c1419c9da0f58
rtbassoc-00361b7c7c8bc85f8
subnet-0856c1419c9da0f58
sg-00bd7ad74e8f767ab
ami-0323c3dd2da7fb37d


aws ec2 associate-iam-instance-profile --instance-id i-00168ea60929f34a0 --iam-instance-profile Name=EC2-CW-MEM-CPU-P-1CDKIN3MQHU7J 


/script/scriptmonitor
